name: Kubernetes Cluster Setup (Vagrant + Docker)
on: [push]

jobs:
  prepare-environment:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate SSH key
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""
        chmod 600 ~/.ssh/id_rsa
        
    - name: Upload SSH key as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ssh-key
        path: ~/.ssh/id_rsa

  setup-master:
    runs-on: self-hosted
    needs: prepare-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Cleanup previous Docker artifacts
        run: |
          # Cleanup any existing Kubernetes containers
          docker ps -a --filter "name=k8s-master" --format "{{.ID}}" | xargs -r docker rm -f || true
          docker ps -a --filter "ancestor=tknerr/baseimage-ubuntu:18.04" --format "{{.ID}}" | xargs -r docker rm -f || true
          
          # Cleanup networks
          docker network rm k8s-net || true
          
      - name: Install Docker and Vagrant
        run: |
          arch -arm64 brew install docker vagrant ansible
          
      - name: Download SSH key
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh/
          
      - run: chmod 600 ~/.ssh/id_rsa
      
      - name: Start Vagrant (with Python pre-install)
        run: |
          vagrant up --provider=docker k8s-master
          vagrant ssh k8s-master -c "sudo apt update && sudo apt install -y python3"
     
      - name: Verify Docker containers
        run: docker ps -a

  setup-workers:
    runs-on: [self-hosted, macos]
    needs: setup-master
    steps:
    - name: Cleanup previous worker containers
      run: |
        docker ps -a --filter "name=node-" --format "{{.ID}}" | xargs -r docker rm -f || true
        docker network create k8s-net || true
        
    - uses: actions/checkout@v4
    
    - name: Install Docker and Vagrant dependencies
      run: |
        arch -arm64 brew install docker vagrant ansible
        
    - name: Download SSH key artifact
      uses: actions/download-artifact@v4
      with:
        name: ssh-key
        path: ~/.ssh/
    
    - run: chmod 600 ~/.ssh/id_rsa
    
    - name: Set up worker nodes
      run: |
        vagrant plugin install vagrant-docker-compose
        vagrant up --provider=docker node-1 node-2
        vagrant ssh node-1 -c "sudo apt update && sudo apt install -y python3"    
        vagrant ssh node-2 -c "sudo apt update && sudo apt install -y python3"    
        
    - name: Verify Docker containers
      run: docker ps -a  
    
    - name: Join workers to cluster
      run: |
        # Wait for master to be ready
        sleep 30
        
        # Get join command with retries
        for i in {1..5}; do
          JOIN_CMD=$(vagrant ssh k8s-master -c "sudo kubeadm token create --print-join-command 2>/dev/null" | tr -d '\r')
          [ -n "$JOIN_CMD" ] && break
          echo "Attempt $i: Waiting for master..."
          sleep 10
        done
        
        [ -z "$JOIN_CMD" ] && { echo "::error::Failed to get join command"; exit 1; }
        
        echo "Join command: $JOIN_CMD"
        
        # Join workers
        for node in node-1 node-2; do
          echo "Joining $node..."
          vagrant ssh $node -c "sudo $JOIN_CMD"
          sleep 5
        done
        
    - name: Verify cluster status
      run: |
        vagrant ssh k8s-master -c "sudo kubectl get nodes"
        vagrant ssh k8s-master -c "sudo kubectl get pods -A"
        
  cleanup:
    needs: [setup-master, setup-workers]
    if: always()
    runs-on: self-hosted
    steps:
    - name: Complete environment cleanup
      run: |
        # Stop and remove all containers
        docker ps -aq --filter "name=k8s-master" --filter "name=node-" | xargs -r docker rm -f || true
        
        # Remove networks
        docker network rm k8s-net || true
        
        # Remove images
        docker images -q --filter "reference=tknerr/baseimage-ubuntu*" | xargs -r docker rmi -f || true
        
        # System prune
        docker system prune -af
        docker volume prune -f
