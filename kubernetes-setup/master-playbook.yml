---
- hosts: all
  become: true
  tasks:
  - name: Install Python (if missing)
      raw: command -v python3 || (apt update && apt install -y python3)
      become: yes
      changed_when: false
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      #- containerd.io=1.6.*
    notify:
      - docker status
  - name: Download containerd
    get_url:
      url: "https://github.com/containerd/containerd/releases/download/v1.7.14/containerd-1.7.14-linux-amd64.tar.gz"
      dest: "/tmp/containerd.tar.gz"

  - name: Extract containerd
    unarchive:
      src: "/tmp/containerd.tar.gz"
      dest: "/usr/local"
      remote_src: yes

  - name: Create containerd config directory
    file:
      path: /etc/containerd
      state: directory

  - name: Generate default containerd config
    command: containerd config default > /etc/containerd/config.toml
    
  - name: Create containerd service file
    copy:
      dest: /etc/systemd/system/containerd.service
      content: |
        [Unit]
        Description=containerd container runtime
        Documentation=https://containerd.io
        After=network.target local-fs.target

        [Service]
        ExecStartPre=-/sbin/modprobe overlay
        ExecStart=/usr/local/bin/containerd

        Type=notify
        Delegate=yes
        KillMode=process
        Restart=always
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

  - name: Start and enable containerd service
    systemd:
      name: containerd
      state: started
      enabled: yes
      daemon_reload: yes

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

  - name: Remove swapfile from /etc/fstab
    mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
    with_items:
    - swap
    - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add Kubernetes GPG apt key
    apt_key:
      url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
      state: present

  - name: Add Kubernetes apt repository
    apt_repository:
      repo: deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /
      state: present
      filename: kubernetes.list  
  
  # - name: Add an apt signing key for Kubernetes
  #   apt_key:
  #     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
  #     state: present

  # - name: Adding apt repository for Kubernetes
  #   apt_repository:
  #     repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
  #     state: present
  #     filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
      allow_unauthenticated: yes
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
  - name: Restart containerd
    systemd:
      name: containerd
      state: restarted

  - name: Remove containerd config
    file:
      path: /etc/containerd/config.toml
      state: absent

  - name: Restart containerd again
    systemd:
      name: containerd
      state: restarted

  - name: Install required packages
    apt:
      name:
        - ebtables
        - socat
      state: present

  - name: Initialize Kubernetes cluster
    command: >
      kubeadm init
      --apiserver-advertise-address=192.168.56.10
      --apiserver-cert-extra-sans=192.168.56.10
      --node-name k8s-master
      --pod-network-cidr=192.168.0.0/16
      --ignore-preflight-errors=Mem
    register: kubeadm_init

  # - name: Initialize the Kubernetes cluster using kubeadm
  #   command: kubeadm init --apiserver-advertise-address="192.168.56.10" --apiserver-cert-extra-sans="192.168.56.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config 

  - name: Install calico pod network
    become: false
    command: kubectl create -f https://docs.projectcalico.org/manifests/calico.yaml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Save join command to file
    copy:
      content: "{{ join_command.stdout }}"
      dest: "/tmp/join-command"
      mode: '0644'

  - name: Fetch join command
    fetch:
      src: "/tmp/join-command"
      dest: "./join-command"
      flat: yes
    become: no

  - name: Write join command to local file
    local_action:
      module: copy
      content: "{{ join_command.stdout_lines[0] }}"
      dest: "./join-command"
      mode: '0755'
    become: no


  # # - name: Copy join command to local file
  # #   local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
  # - name: Copy join command to local file 
  #   local_action: 
  #     module: copy 
  #     content: "{{ join_command.stdout_lines[0] }}" 
  #     dest: "./join-command" 
  #     mode: '0755'  # Make the file executable if necessary
  
  handlers:
    - name: docker status
      service: name=docker state=started
