---
- name: Configure Kubernetes master
  hosts: localhost
  become: true
  vars:
    k8s_version: "1.28.15-1.1"
    pod_network_cidr: "10.244.0.0/16"
    control_plane_endpoint: "192.168.56.10"
    timestamp: "{{ ansible_date_time.iso8601 }}"

  tasks:
    # System Preparation
    - name: Ensure log directory exists
      file:
        path: /var/log
        state: directory
        mode: 0755

    - name: Disable swap
      shell: |
        swapoff -a
        [ -f /etc/fstab ] && sed -i '/ swap / s/^/#/' /etc/fstab
      args:
        warn: false

    - name: Configure kernel parameters
      shell: |
        cat <<EOF | tee /etc/sysctl.d/k8s.conf
        net.ipv4.ip_forward = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        EOF
        sysctl --system
      args:
        warn: false

    # Container Runtime Setup
    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: yes
    
    # Containerd Installation
    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: yes

    - name: Create containerd directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - /etc/containerd
        - /run/containerd
        - /var/lib/containerd


    - name: Configure containerd
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              sandbox_image = "registry.k8s.io/pause:3.8"
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    runtime_type = "io.containerd.runc.v2"
                    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                      SystemdCgroup = false

    - name: Start containerd
      systemd:
        name: containerd
        state: started
        enabled: yes
        daemon_reload: yes
      when: ansible_service_mgr == "systemd"

    - name: Alternative containerd start (non-systemd)
      shell: |
        pkill containerd || true
        rm -f /run/containerd/containerd.sock
        nohup /usr/bin/containerd --config /etc/containerd/config.toml >/var/log/containerd.log 2>&1 &
        timeout 30 bash -c 'until [ -S /run/containerd/containerd.sock ]; do sleep 1; done'
      args:
        warn: false
      when: ansible_service_mgr != "systemd"

    # Kubernetes Installation
    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
        state: present
        update_cache: yes

    - name: Setup Kubernetes repository
      block:
        - name: Create keyrings directory
          file:
            path: /usr/share/keyrings
            state: directory
            mode: 0755
            
    - name: Add Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
        chmod 644 /usr/share/keyrings/kubernetes-archive-keyring.gpg
      args:
        warn: false        
    
    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present
        filename: kubernetes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet={{ k8s_version }}
          - kubeadm={{ k8s_version }}
          - kubectl={{ k8s_version }}
        state: present
        update_cache: yes

      - name: Install ipvsadm if missing
          apt:
            name: ipvsadm
            state: present
          when: "'ipvsadm' not in ansible_facts.packages"
  
      - name: Perform comprehensive cleanup
        block:
          - name: Stop all Kubernetes processes
            shell: |
              pkill -f 'kubelet|kube-apiserver|kube-scheduler|kube-controller-manager|etcd' || true
              sleep 5
              pkill -9 -f 'kubelet|kube-apiserver|kube-scheduler|kube-controller-manager|etcd' || true
              { command -v crictl >/dev/null && crictl rm -fa; } || true
              [ -f /var/run/kubelet.pid ] && { kill -9 $(cat /var/run/kubelet.pid); rm -f /var/run/kubelet.pid; } || true
            args:
              warn: false
            ignore_errors: yes
  
          - name: Remove all Kubernetes artifacts
            shell: |
              find /etc/kubernetes -mindepth 1 -delete || true
              find /var/lib/kubelet -mindepth 1 -not -name '.kubelet-keep' -delete || true
              iptables -F && iptables -t nat -F && iptables -t mangle -F || true
              { command -v ipvsadm >/dev/null && ipvsadm --clear; } || true
              [ ! -d /etc/kubernetes ] && [ ! -d /var/lib/kubelet ] && echo "Cleanup successful" || exit 1
            args:
              warn: false
            register: cleanup_result
            retries: 3
            delay: 5
            until: cleanup_result.rc == 0
  
        rescue:
          - name: Final cleanup instructions
            fail:
              msg: |
                Automatic cleanup failed. Please manually execute:
                sudo rm -rf /etc/kubernetes/* /var/lib/kubelet/*
                sudo iptables -F && sudo iptables -t nat -F && sudo iptables -t mangle -F
                Then re-run this playbook.

    - name: Initialize Kubernetes cluster
      block:
        - name: Run kubeadm init
          shell: |
            set -o pipefail
            kubeadm init \
              --kubernetes-version=v{{ k8s_version.split('-')[0] }} \
              --pod-network-cidr={{ pod_network_cidr }} \
              --ignore-preflight-errors=Swap \
              --cri-socket=unix:///run/containerd/containerd.sock \
              --control-plane-endpoint={{ control_plane_endpoint }} \
              --image-repository=registry.k8s.io \
              --upload-certs \
              --skip-phases=addon/kube-proxy 2>&1 | tee /var/log/kubeadm-init-{{ timestamp }}.log
          register: init_result
          retries: 2
          delay: 10

      rescue:
        - name: Collect diagnostics
          block:
            - name: Check for init log
              stat:
                path: /var/log/kubeadm-init-{{ timestamp }}.log
              register: init_log

            - name: Capture logs if available
              shell: cat /var/log/kubeadm-init-{{ timestamp }}.log
              register: init_logs
              when: init_log.stat.exists

            - name: Show diagnostics
              debug:
                msg: |
                  INITIALIZATION FAILED!
                  {% if init_log.stat.exists %}
                  Logs:
                  {{ init_logs.stdout | default('No logs captured') }}
                  {% else %}
                  No log file found at /var/log/kubeadm-init-{{ timestamp }}.log
                  {% endif %}
                  System Info:
                  - Containerd: {{ lookup('pipe', 'crictl ps -a') }}
                  - Network: {{ lookup('pipe', 'ip addr show') }}
                  - Kernel: {{ lookup('pipe', 'uname -a') }}
          always:
            - name: Final failure notice
              fail:
                msg: "Cluster initialization failed. See previous diagnostics for troubleshooting."

    - name: Configure kubectl
      block:
        - name: Setup kubeconfig
          shell: |
            mkdir -p $HOME/.kube
            cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
            chmod 600 $HOME/.kube/config

        - name: Verify cluster status
          command: kubectl get nodes
          register: cluster_status
          retries: 5
          delay: 10
          until: cluster_status.rc == 0

      rescue:
        - name: Cluster setup failed
          fail:
            msg: "Failed to configure kubectl or verify cluster status"

  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
