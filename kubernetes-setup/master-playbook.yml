- name: Configure Kubernetes master
  hosts: localhost
  become: true
  tasks:
    # 1. Disable swap
    - name: Disable swap
      shell: |
        swapoff -a
        [ -f /etc/fstab ] && sed -i '/ swap / s/^/#/' /etc/fstab
      args:
        warn: false
    # 2. Configure kernel parameters (works without modules)
    - name: Configure sysctl parameters
      shell: |
        echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf
        echo 'net.bridge.bridge-nf-call-ip6tables = 1' >> /etc/sysctl.conf
        echo 'net.bridge.bridge-nf-call-iptables = 1' >> /etc/sysctl.conf
        sysctl -p
      args:
        warn: false
 # 1. Install containerd package
    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: yes

    # 2. Create necessary directories
    - name: Create containerd directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - /etc/containerd
        - /run/containerd
        - /var/lib/containerd

    # 3. Ensure config file exists with valid content
    - name: Create containerd config
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              sandbox_image = "registry.k8s.io/pause:3.8"
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    runtime_type = "io.containerd.runc.v2"
                    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                      SystemdCgroup = false

    # 4. Create systemd drop-in for non-systemd environments
    - name: Create containerd service configuration
      copy:
        dest: /etc/systemd/system/containerd.service.d/override.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/containerd --config /etc/containerd/config.toml
      when: ansible_service_mgr == "systemd"

    # 5. Start and enable containerd (systemd)
    - name: Start containerd (systemd)
      systemd:
        name: containerd
        state: started
        enabled: yes
        daemon_reload: yes
      when: ansible_service_mgr == "systemd"

    # 6. Alternative start for non-systemd environments
    - name: Start containerd (non-systemd)
      shell: |
        # Stop any running containerd
        pkill containerd || true
        # Clean up old socket
        rm -f /run/containerd/containerd.sock
        # Start fresh instance
        nohup /usr/bin/containerd --config /etc/containerd/config.toml >/var/log/containerd.log 2>&1 &
        # Wait for socket to be created
        timeout 30 bash -c 'until [ -S /run/containerd/containerd.sock ]; do sleep 1; done'
      args:
        warn: false
      when: ansible_service_mgr != "systemd"

    # 7. Verify containerd is running properly
    - name: Verify containerd socket
      wait_for:
        path: /run/containerd/containerd.sock
        timeout: 30

    - name: Test containerd connectivity
      command: ctr version
      register: ctr_test
      changed_when: false
      retries: 3
      delay: 5
      until: ctr_test.rc == 0

    - name: Fail if containerd not working
      fail:
        msg: |
          Containerd failed to start properly.
          Check logs with: journalctl -u containerd || cat /var/log/containerd.log
          Socket status: ls -la /run/containerd/containerd.sock
      when: ctr_test.rc != 0
      
    # 4. Install Kubernetes components
    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
        state: present
        update_cache: yes

    # 2. Add Kubernetes GPG key (new method)
    - name: Create keyrings directory
      file:
        path: /usr/share/keyrings
        state: directory
        mode: 0755

    - name: Download and install Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
        chmod 644 /usr/share/keyrings/kubernetes-archive-keyring.gpg
      args:
        warn: false

    # 3. Add Kubernetes repository (verified)
    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present
        filename: kubernetes
        mode: 0644

    # 4. Verify repository setup
    - name: Update apt package index
      apt:
        update_cache: yes
      register: apt_update
      until: apt_update is succeeded
      retries: 3
      delay: 5

    - name: Verify Kubernetes packages are available
      command: apt-cache policy kubelet
      register: kubelet_policy
      changed_when: false

    - name: Show available Kubernetes versions
      debug:
        var: kubelet_policy.stdout_lines

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet=1.28.15-1.1
          - kubeadm=1.28.15-1.1
          - kubectl=1.28.15-1.1
        state: present
        update_cache: yes

    - name: Hold Kubernetes packages
      command: apt-mark hold kubelet kubeadm kubectl
    
    # 1. Nuclear cleanup with verification
    - name: Atomic cleanup of Kubernetes
      block:
        - name: Stop all Kubernetes services
          shell: |
            systemctl stop kubelet || true
            pkill -f kubelet || true
            pkill -f kube-apiserver || true

        - name: Remove all Kubernetes artifacts
          shell: |
            # Filesystem cleanup
            find /etc/kubernetes /var/lib/kubelet /var/lib/etcd -delete 2>/dev/null || true
            rm -rf ~/.kube /root/.kube
            
            # Network cleanup
            iptables -F && iptables -t nat -F && iptables -t mangle -F
            ipvsadm --clear || true
            
            # Container cleanup
            crictl rm -fa 2>/dev/null || true
            crictl rmp -fa 2>/dev/null || true
            
            # Verify complete removal
            [ ! -d /etc/kubernetes ] && [ ! -d /var/lib/kubelet ] && \
            echo "Cleanup successful" || exit 1
          args:
            warn: false
          register: cleanup_result
          retries: 3
          delay: 5
          until: cleanup_result.rc == 0

      rescue:
        - name: Emergency filesystem check
          shell: |
            ls -la /etc/kubernetes/ /var/lib/kubelet/ || true
            mount | grep -E 'kubelet|kubernetes' || true
          register: fs_check
          changed_when: false

        - name: Fail with diagnostic info
          fail:
            msg: |
              Critical cleanup failed! Manual intervention required.
              Remaining files:
              {{ fs_check.stdout }}
              Suggested fix:
              1. Reboot the node
              2. Verify no Kubernetes processes are running (ps aux | grep -E 'kube|etcd')
              3. Manually delete /etc/kubernetes and /var/lib/kubelet

    # 2. Initialize with atomic operations
    - name: Atomic cluster initialization
      block:
        - name: Verify clean environment
          shell: |
            [ ! -f /etc/kubernetes/manifests/kube-apiserver.yaml ] && \
            [ ! -f /etc/kubernetes/manifests/kube-controller-manager.yaml ] && \
            echo "Environment clean" || exit 1
          changed_when: false

        - name: Initialize Kubernetes cluster
          shell: |
            set -o pipefail
            kubeadm init \
              --kubernetes-version=v1.28.15 \
              --pod-network-cidr=10.244.0.0/16 \
              --ignore-preflight-errors=Swap \
              --cri-socket=unix:///run/containerd/containerd.sock \
              --control-plane-endpoint=192.168.56.10 \
              --image-repository=registry.k8s.io \
              --upload-certs \
              --skip-phases=addon/kube-proxy 2>&1 | tee /var/log/kubeadm-init.log
          register: init_result
          retries: 2
          delay: 10

      rescue:
        - name: Capture initialization logs
          shell: cat /var/log/kubeadm-init.log
          register: init_logs
          changed_when: false

        - name: Diagnostic dump
          debug:
            msg: |
              INITIALIZATION FAILED!
              Logs:
              {{ init_logs.stdout }}
              Suggested actions:
              1. Check containerd: crictl ps -a
              2. Verify network: ip addr show
              3. Check kernel: uname -a
              4. Inspect logs: journalctl -u kubelet -n 100

    # 3. Post-initialization setup
    - name: Configure cluster access
      block:
        - name: Set up kubectl config
          shell: |
            mkdir -p $HOME/.kube
            cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
            chmod 600 $HOME/.kube/config

        - name: Verify cluster status
          shell: kubectl get nodes
          register: cluster_status
          retries: 3
          delay: 5
          until: cluster_status.rc == 0

      when: init_result is succeeded
  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
