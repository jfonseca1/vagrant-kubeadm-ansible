- name: Configure Kubernetes worker
  hosts: localhost
  become: true
  tasks:
    # 1. Disable swap
    - name: Disable swap
      shell: |
        swapoff -a
        [ -f /etc/fstab ] && sed -i '/ swap / s/^/#/' /etc/fstab
      args:
        warn: false

# 1. Install containerd package
    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: yes

    # 2. Create necessary directories
    - name: Create containerd directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - /etc/containerd
        - /run/containerd
        - /var/lib/containerd

    # 3. Ensure config file exists with valid content
    - name: Create containerd config
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              sandbox_image = "registry.k8s.io/pause:3.8"
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    runtime_type = "io.containerd.runc.v2"
                    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                      SystemdCgroup = false

    # 4. Create systemd drop-in for non-systemd environments
    - name: Create containerd service configuration
      copy:
        dest: /etc/systemd/system/containerd.service.d/override.conf
        content: |
          [Service]
          ExecStart=
          ExecStart=/usr/bin/containerd --config /etc/containerd/config.toml
      when: ansible_service_mgr == "systemd"

    # 5. Start and enable containerd (systemd)
    - name: Start containerd (systemd)
      systemd:
        name: containerd
        state: started
        enabled: yes
        daemon_reload: yes
      when: ansible_service_mgr == "systemd"

    # 6. Alternative start for non-systemd environments
    - name: Start containerd (non-systemd)
      shell: |
        # Stop any running containerd
        pkill containerd || true
        # Clean up old socket
        rm -f /run/containerd/containerd.sock
        # Start fresh instance
        nohup /usr/bin/containerd --config /etc/containerd/config.toml >/var/log/containerd.log 2>&1 &
        # Wait for socket to be created
        timeout 30 bash -c 'until [ -S /run/containerd/containerd.sock ]; do sleep 1; done'
      args:
        warn: false
      when: ansible_service_mgr != "systemd"

    # 7. Verify containerd is running properly
    - name: Verify containerd socket
      wait_for:
        path: /run/containerd/containerd.sock
        timeout: 30

    - name: Test containerd connectivity
      command: ctr version
      register: ctr_test
      changed_when: false
      retries: 3
      delay: 5
      until: ctr_test.rc == 0

    - name: Fail if containerd not working
      fail:
        msg: |
          Containerd failed to start properly.
          Check logs with: journalctl -u containerd || cat /var/log/containerd.log
          Socket status: ls -la /run/containerd/containerd.sock
      when: ctr_test.rc != 0

    # Rest of your worker tasks remain the same...
    - name: Load kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - br_netfilter
        - overlay

    - name: Configure sysctl
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      with_items:
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }

    # ... (rest of your playbook)

- name: Install Kubernetes components on worker
  hosts: localhost
  become: true
  tasks:
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
        state: present
        update_cache: yes

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755

    - name: Add Kubernetes GPG key (updated method)
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        warn: false

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        state: present
        filename: kubernetes
        mode: 0644
        
    - name: Install kubeadm, kubelet and kubectl
      apt:
        name:
          - kubelet=1.28.0-1.1
          - kubeadm=1.28.0-1.1
          - kubectl=1.28.0-1.1
        state: present

    - name: Hold kubeadm, kubelet and kubectl versions
      command: apt-mark hold kubelet kubeadm kubectl

handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
